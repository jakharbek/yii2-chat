<?php

namespace jakharbek\chat\forms;

use jakharbek\chat\dto\deleteMessageDTO;
use jakharbek\chat\interfaces\iChatsServices;
use jakharbek\chat\models\Messages;
use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;

/**
 * Class deleteMessageForm
 * @package common\modules\chat\forms
 */
class deleteMessageForm extends Model
{
    public $message_id;
    public $delete_for;

    /**
     * @return array
     */
    public function rules()
    {
        return ArrayHelper::merge(parent::rules(), [
            [['message_id', 'delete_for'], 'required'],
            [['message_id', 'delete_for'], 'integer'],
            [['delete_for'], 'in', 'range' => [Messages::DELETE_FOR_ALL, Messages::DELETE_FOR_SENDER, Messages::DELETE_FOR_RECEIVER]],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     * @throws \yii\base\InvalidConfigException
     */
    public function delete()
    {
        if (!$this->validate()) {
            return false;
        }
        try {

            /**
             * @var $service iChatsServices
             */
            $service = Yii::createObject(['class' => iChatsServices::class]);
            $deleteMessageDTO = new deleteMessageDTO();
            $deleteMessageDTO->delete_for = $this->delete_for;
            $deleteMessageDTO->user_id = Yii::$app->user->id;
            $deleteMessageDTO->message_id = $this->message_id;

            $message = $service->deleteMessage($deleteMessageDTO);

        } catch (\Exception $exception) {
            $this->addError("message_id", $exception->getMessage());
            return false;
        }
        return $message;
    }
}